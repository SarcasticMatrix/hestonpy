{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "baa49a5c-d599-439a-99eb-ef729adfab0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from hestonpy.models.heston import Heston\n",
    "from hestonpy.models.calibration.volatilitySmile import VolatilitySmile, fontdict\n",
    "from hestonpy.option.data import get_options_data, filter_data_for_maturity\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.font_manager as font_manager\n",
    "font_legend = font_manager.FontProperties(\n",
    "    style='normal', \n",
    "    size=10,\n",
    ")\n",
    "fontdict_title = {\n",
    "    'fontsize': 20,\n",
    "    'fontweight': 'bold'\n",
    "    }\n",
    "from datetime import datetime\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5ae987d-564a-42ac-abbd-38fde6f2101e",
   "metadata": {},
   "source": [
    "# Calibration of Heston models on market data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f15bea4-bee4-4544-add4-4e348def75f7",
   "metadata": {},
   "source": [
    "We will calibrate our models on S&P smiles. You can also try with Apple, but there is less liquidity on the market, so less available maturities. Some parameters,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "328842ef-cc4d-49da-b292-0b8d09d387ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "symbol = '^SPX'\n",
    "all_market_data, spot, maturities = get_options_data(symbol)\n",
    "if symbol == '^SPX':\n",
    "    considered_maturities = [maturities[7], maturities[14], maturities[28], maturities[38]]\n",
    "else:\n",
    "    considered_maturities = [maturities[1], maturities[3], maturities[8], maturities[14]]\n",
    "    \n",
    "r = 0.00\n",
    "params = {\n",
    "    \"vol_initial\": 0.06,\n",
    "    \"kappa\": 1.25,\n",
    "    \"theta\": 0.06,\n",
    "    \"drift_emm\": 0.00,\n",
    "    \"sigma\": 0.6,\n",
    "    \"rho\": -0.8,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42768608-2463-4681-8e33-06d50fa342cb",
   "metadata": {},
   "source": [
    "For each maturity/smile we filter the data (based on bid-ask spread, the moneyness etc.), then we calibrate with a local optimiser to initialise our global optimiser."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "05d0b385-0b4f-4de0-bd03-54a756bef07e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "2025-04-11\n",
      "================================================================================ \n",
      "\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[3], line 38\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[38;5;66;03m####################################\u001b[39;00m\n\u001b[1;32m     35\u001b[0m \u001b[38;5;66;03m### Calibration \u001b[39;00m\n\u001b[1;32m     36\u001b[0m \u001b[38;5;66;03m####################################\u001b[39;00m\n\u001b[1;32m     37\u001b[0m heston \u001b[38;5;241m=\u001b[39m Heston(spot\u001b[38;5;241m=\u001b[39mspot, r\u001b[38;5;241m=\u001b[39mr, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams)\n\u001b[0;32m---> 38\u001b[0m initial_params \u001b[38;5;241m=\u001b[39m \u001b[43mmarketVolatilitySmile\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcalibration\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     39\u001b[0m \u001b[43m    \u001b[49m\u001b[43mprice_function\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheston\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_price\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     40\u001b[0m \u001b[43m    \u001b[49m\u001b[43mguess_correlation_sign\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mnegative\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     41\u001b[0m \u001b[43m    \u001b[49m\u001b[43minitial_guess\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43mparams\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mkappa\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtheta\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msigma\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mrho\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     42\u001b[0m \u001b[43m    \u001b[49m\u001b[43mspeed\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlocal\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     43\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     45\u001b[0m \u001b[38;5;66;03m# Absolute calibration\u001b[39;00m\n\u001b[1;32m     46\u001b[0m calibrated_params \u001b[38;5;241m=\u001b[39m marketVolatilitySmile\u001b[38;5;241m.\u001b[39mcalibration(\n\u001b[1;32m     47\u001b[0m     relative_errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m     48\u001b[0m     price_function\u001b[38;5;241m=\u001b[39mheston\u001b[38;5;241m.\u001b[39mcall_price,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     52\u001b[0m     power\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmse\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m     53\u001b[0m )\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/src/hestonpy/models/calibration/volatilitySmile.py:293\u001b[0m, in \u001b[0;36mVolatilitySmile.calibration\u001b[0;34m(self, price_function, initial_guess, guess_correlation_sign, speed, power, method, weights, relative_errors)\u001b[0m\n\u001b[1;32m    291\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m warnings\u001b[38;5;241m.\u001b[39mcatch_warnings():\n\u001b[1;32m    292\u001b[0m         warnings\u001b[38;5;241m.\u001b[39msimplefilter(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m, category\u001b[38;5;241m=\u001b[39m\u001b[38;5;167;01mRuntimeWarning\u001b[39;00m)\n\u001b[0;32m--> 293\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[43mminimize\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcost_function\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minitial_guess\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mminimizer_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    295\u001b[0m \u001b[38;5;66;03m########################################\u001b[39;00m\n\u001b[1;32m    296\u001b[0m \u001b[38;5;66;03m#### Global calibration scheme\u001b[39;00m\n\u001b[1;32m    297\u001b[0m \u001b[38;5;66;03m########################################\u001b[39;00m\n\u001b[1;32m    298\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m speed \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mglobal\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_minimize.py:738\u001b[0m, in \u001b[0;36mminimize\u001b[0;34m(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)\u001b[0m\n\u001b[1;32m    735\u001b[0m     res \u001b[38;5;241m=\u001b[39m _minimize_newtoncg(fun, x0, args, jac, hess, hessp, callback,\n\u001b[1;32m    736\u001b[0m                              \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39moptions)\n\u001b[1;32m    737\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m meth \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124ml-bfgs-b\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m--> 738\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[43m_minimize_lbfgsb\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfun\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx0\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mjac\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbounds\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    739\u001b[0m \u001b[43m                           \u001b[49m\u001b[43mcallback\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcallback\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    740\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m meth \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtnc\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    741\u001b[0m     res \u001b[38;5;241m=\u001b[39m _minimize_tnc(fun, x0, args, jac, bounds, callback\u001b[38;5;241m=\u001b[39mcallback,\n\u001b[1;32m    742\u001b[0m                         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39moptions)\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_lbfgsb_py.py:441\u001b[0m, in \u001b[0;36m_minimize_lbfgsb\u001b[0;34m(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, finite_diff_rel_step, **unknown_options)\u001b[0m\n\u001b[1;32m    433\u001b[0m _lbfgsb\u001b[38;5;241m.\u001b[39msetulb(m, x, low_bnd, upper_bnd, nbd, f, g, factr, pgtol, wa,\n\u001b[1;32m    434\u001b[0m                iwa, task, lsave, isave, dsave, maxls, ln_task)\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m task[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m3\u001b[39m:\n\u001b[1;32m    437\u001b[0m     \u001b[38;5;66;03m# The minimization routine wants f and g at the current x.\u001b[39;00m\n\u001b[1;32m    438\u001b[0m     \u001b[38;5;66;03m# Note that interruptions due to maxfun are postponed\u001b[39;00m\n\u001b[1;32m    439\u001b[0m     \u001b[38;5;66;03m# until the completion of the current minimization iteration.\u001b[39;00m\n\u001b[1;32m    440\u001b[0m     \u001b[38;5;66;03m# Overwrite f and g:\u001b[39;00m\n\u001b[0;32m--> 441\u001b[0m     f, g \u001b[38;5;241m=\u001b[39m \u001b[43mfunc_and_grad\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    442\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m task[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    443\u001b[0m     \u001b[38;5;66;03m# new iteration\u001b[39;00m\n\u001b[1;32m    444\u001b[0m     n_iterations \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:345\u001b[0m, in \u001b[0;36mScalarFunction.fun_and_grad\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    343\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_x(x)\n\u001b[1;32m    344\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_fun()\n\u001b[0;32m--> 345\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_update_grad\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    346\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mf, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mg\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:307\u001b[0m, in \u001b[0;36mScalarFunction._update_grad\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_orig_grad \u001b[38;5;129;01min\u001b[39;00m FD_METHODS:\n\u001b[1;32m    306\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_fun()\n\u001b[0;32m--> 307\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mg \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_wrapped_grad\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf0\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    308\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mg_updated \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:48\u001b[0m, in \u001b[0;36m_wrapper_grad.<locals>.wrapped1\u001b[0;34m(x, f0)\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mwrapped1\u001b[39m(x, f0\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m     47\u001b[0m     ncalls[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m---> 48\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mapprox_derivative\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     49\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfun\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf0\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mf0\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfinite_diff_options\u001b[49m\n\u001b[1;32m     50\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_numdiff.py:523\u001b[0m, in \u001b[0;36mapprox_derivative\u001b[0;34m(fun, x0, method, rel_step, abs_step, f0, bounds, sparsity, as_linear_operator, args, kwargs)\u001b[0m\n\u001b[1;32m    520\u001b[0m     use_one_sided \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    522\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sparsity \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 523\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_dense_difference\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfun_wrapped\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx0\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf0\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mh\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    524\u001b[0m \u001b[43m                             \u001b[49m\u001b[43muse_one_sided\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    525\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    526\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m issparse(sparsity) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(sparsity) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m:\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_numdiff.py:596\u001b[0m, in \u001b[0;36m_dense_difference\u001b[0;34m(fun, x0, f0, h, use_one_sided, method)\u001b[0m\n\u001b[1;32m    594\u001b[0m     x1[i] \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m h[i]\n\u001b[1;32m    595\u001b[0m     dx \u001b[38;5;241m=\u001b[39m x1[i] \u001b[38;5;241m-\u001b[39m x0[i]  \u001b[38;5;66;03m# Recompute dx as exactly representable number.\u001b[39;00m\n\u001b[0;32m--> 596\u001b[0m     df \u001b[38;5;241m=\u001b[39m \u001b[43mfun\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx1\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;241m-\u001b[39m f0\n\u001b[1;32m    597\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m3-point\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m use_one_sided[i]:\n\u001b[1;32m    598\u001b[0m     x1[i] \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m h[i]\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_numdiff.py:474\u001b[0m, in \u001b[0;36mapprox_derivative.<locals>.fun_wrapped\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    471\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m xp\u001b[38;5;241m.\u001b[39misdtype(x\u001b[38;5;241m.\u001b[39mdtype, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mreal floating\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m    472\u001b[0m     x \u001b[38;5;241m=\u001b[39m xp\u001b[38;5;241m.\u001b[39mastype(x, x0\u001b[38;5;241m.\u001b[39mdtype)\n\u001b[0;32m--> 474\u001b[0m f \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39matleast_1d(\u001b[43mfun\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    475\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m f\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    476\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m`fun` return value has \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    477\u001b[0m                        \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmore than 1 dimension.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py:21\u001b[0m, in \u001b[0;36m_wrapper_fun.<locals>.wrapped\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     17\u001b[0m ncalls[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# Send a copy because the user may overwrite it.\u001b[39;00m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;66;03m# Overwriting results in undefined behaviour because\u001b[39;00m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m# fun(self.x) will change self.x, with the two no longer linked.\u001b[39;00m\n\u001b[0;32m---> 21\u001b[0m fx \u001b[38;5;241m=\u001b[39m \u001b[43mfun\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;66;03m# Make sure the function returns a true scalar\u001b[39;00m\n\u001b[1;32m     23\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np\u001b[38;5;241m.\u001b[39misscalar(fx):\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/src/hestonpy/models/calibration/volatilitySmile.py:270\u001b[0m, in \u001b[0;36mVolatilitySmile.calibration.<locals>.cost_function\u001b[0;34m(params)\u001b[0m\n\u001b[1;32m    268\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mcost_function\u001b[39m(params):\n\u001b[1;32m    269\u001b[0m     function_params \u001b[38;5;241m=\u001b[39m _get_parameters(model_type, params)\n\u001b[0;32m--> 270\u001b[0m     model_prices \u001b[38;5;241m=\u001b[39m \u001b[43mprice_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    271\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfunction_params\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    272\u001b[0m \u001b[43m        \u001b[49m\u001b[43mv\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvol_initial\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    273\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstrike\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstrikes\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    274\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtime_to_maturity\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtime_to_maturity\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    275\u001b[0m \u001b[43m        \u001b[49m\u001b[43ms\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43matm\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    276\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    278\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m difference_function(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmarket_prices, model_prices)\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/src/hestonpy/models/heston.py:353\u001b[0m, in \u001b[0;36mHeston.call_price\u001b[0;34m(self, strike, time_to_maturity, s, v, **kwargs)\u001b[0m\n\u001b[1;32m    331\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mcall_price\u001b[39m(\n\u001b[1;32m    332\u001b[0m         \u001b[38;5;28mself\u001b[39m, \n\u001b[1;32m    333\u001b[0m         strike: np\u001b[38;5;241m.\u001b[39marray, \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    337\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[1;32m    338\u001b[0m     ):\n\u001b[1;32m    339\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    340\u001b[0m \u001b[38;5;124;03m    Price a European call option using the Carr-Madan method.\u001b[39;00m\n\u001b[1;32m    341\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    350\u001b[0m \u001b[38;5;124;03m    :rtype: float\u001b[39;00m\n\u001b[1;32m    351\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 353\u001b[0m     price \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcarr_madan_price\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    354\u001b[0m \u001b[43m        \u001b[49m\u001b[43ms\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43ms\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\n\u001b[1;32m    355\u001b[0m \u001b[43m        \u001b[49m\u001b[43mv\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    356\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstrike\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstrike\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\n\u001b[1;32m    357\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtime_to_maturity\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtime_to_maturity\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    358\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\n\u001b[1;32m    359\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    360\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m price\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/src/hestonpy/models/heston.py:514\u001b[0m, in \u001b[0;36mHeston.carr_madan_price\u001b[0;34m(self, strike, time_to_maturity, s, v, error_boolean, **kwargs)\u001b[0m\n\u001b[1;32m    505\u001b[0m price_hat \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    506\u001b[0m     \u001b[38;5;28;01mlambda\u001b[39;00m u: np\u001b[38;5;241m.\u001b[39mexp(\u001b[38;5;241m-\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mr \u001b[38;5;241m*\u001b[39m time_to_maturity)\n\u001b[1;32m    507\u001b[0m     \u001b[38;5;241m/\u001b[39m (alpha\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m+\u001b[39m alpha \u001b[38;5;241m-\u001b[39m u\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m+\u001b[39m u \u001b[38;5;241m*\u001b[39m (\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m alpha \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m) \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m1\u001b[39mj)\n\u001b[1;32m    508\u001b[0m     \u001b[38;5;241m*\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcharacteristic(j\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)(x, v, time_to_maturity, u \u001b[38;5;241m-\u001b[39m (alpha \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m) \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m1\u001b[39mj)\n\u001b[1;32m    509\u001b[0m )\n\u001b[1;32m    511\u001b[0m integrand \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mlambda\u001b[39;00m u: np\u001b[38;5;241m.\u001b[39mexp(\u001b[38;5;241m-\u001b[39mu \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mlog(strike) \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m1\u001b[39mj) \u001b[38;5;241m*\u001b[39m price_hat(u)\n\u001b[1;32m    513\u001b[0m price \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mreal(\n\u001b[0;32m--> 514\u001b[0m     np\u001b[38;5;241m.\u001b[39mexp(\u001b[38;5;241m-\u001b[39malpha \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mlog(strike)) \u001b[38;5;241m/\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m \u001b[43mquad_vec\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mintegrand\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ma\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mb\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1000\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m0\u001b[39m]\n\u001b[1;32m    515\u001b[0m )\n\u001b[1;32m    517\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m error_boolean:\n\u001b[1;32m    518\u001b[0m     error \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    519\u001b[0m         np\u001b[38;5;241m.\u001b[39mexp(\u001b[38;5;241m-\u001b[39malpha \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mlog(strike)) \u001b[38;5;241m/\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m quad_vec(f\u001b[38;5;241m=\u001b[39mintegrand, a\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m, b\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1000\u001b[39m)[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m    520\u001b[0m     )\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/integrate/_quad_vec.py:412\u001b[0m, in \u001b[0;36mquad_vec\u001b[0;34m(f, a, b, epsabs, epsrel, norm, cache_size, limit, workers, points, quadrature, full_output, args)\u001b[0m\n\u001b[1;32m    409\u001b[0m     err_sum \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m-\u001b[39mneg_old_err\n\u001b[1;32m    411\u001b[0m \u001b[38;5;66;03m# Subdivide intervals\u001b[39;00m\n\u001b[0;32m--> 412\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m parts \u001b[38;5;129;01min\u001b[39;00m mapwrapper(_subdivide_interval, to_process):\n\u001b[1;32m    413\u001b[0m     dint, derr, dround_err, subint, dneval \u001b[38;5;241m=\u001b[39m parts\n\u001b[1;32m    414\u001b[0m     neval \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m dneval\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/integrate/_quad_vec.py:472\u001b[0m, in \u001b[0;36m_subdivide_interval\u001b[0;34m(args)\u001b[0m\n\u001b[1;32m    470\u001b[0m s1, err1, round1 \u001b[38;5;241m=\u001b[39m _quadrature(a, c, f, norm_func)\n\u001b[1;32m    471\u001b[0m dneval \u001b[38;5;241m=\u001b[39m _quadrature\u001b[38;5;241m.\u001b[39mnum_eval\n\u001b[0;32m--> 472\u001b[0m s2, err2, round2 \u001b[38;5;241m=\u001b[39m \u001b[43m_quadrature\u001b[49m\u001b[43m(\u001b[49m\u001b[43mc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnorm_func\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    473\u001b[0m dneval \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m _quadrature\u001b[38;5;241m.\u001b[39mnum_eval\n\u001b[1;32m    474\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m old_int \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/integrate/_quad_vec.py:626\u001b[0m, in \u001b[0;36m_quadrature_gk21\u001b[0;34m(a, b, f, norm_func)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[38;5;66;03m# 21-point weights\u001b[39;00m\n\u001b[1;32m    604\u001b[0m v \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m0.011694638867371874278064396062192\u001b[39m,\n\u001b[1;32m    605\u001b[0m      \u001b[38;5;241m0.032558162307964727478818972459390\u001b[39m,\n\u001b[1;32m    606\u001b[0m      \u001b[38;5;241m0.054755896574351996031381300244580\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    623\u001b[0m      \u001b[38;5;241m0.032558162307964727478818972459390\u001b[39m,\n\u001b[1;32m    624\u001b[0m      \u001b[38;5;241m0.011694638867371874278064396062192\u001b[39m)\n\u001b[0;32m--> 626\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_quadrature_gk\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnorm_func\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mw\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/Documents/packages/hestonpy/.venv/lib/python3.10/site-packages/scipy/integrate/_quad_vec.py:535\u001b[0m, in \u001b[0;36m_quadrature_gk\u001b[0;34m(a, b, f, norm_func, x, w, v)\u001b[0m\n\u001b[1;32m    533\u001b[0m     s_k \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m vv \u001b[38;5;241m*\u001b[39m ff\n\u001b[1;32m    534\u001b[0m     \u001b[38;5;66;03m# \\int |f(x)|\u001b[39;00m\n\u001b[0;32m--> 535\u001b[0m     s_k_abs \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m vv \u001b[38;5;241m*\u001b[39m \u001b[38;5;28;43mabs\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mff\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    537\u001b[0m \u001b[38;5;66;03m# Gauss\u001b[39;00m\n\u001b[1;32m    538\u001b[0m s_g \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.0\u001b[39m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(2, 2, layout=\"constrained\")\n",
    "fig.suptitle(f'Market smiles: {symbol}', **fontdict_title)\n",
    "\n",
    "############################################################\n",
    "##### Absolute\n",
    "############################################################\n",
    "for maturity, ax in zip(considered_maturities, axs.flatten()):\n",
    "\n",
    "    print(\"=\"*80)\n",
    "    print(maturity)\n",
    "    print(\"=\"*80,\"\\n\")\n",
    "\n",
    "    ####################################\n",
    "    ### Getting and filtering data \n",
    "    ####################################\n",
    "\n",
    "    full_market_data = filter_data_for_maturity(all_market_data, maturity)\n",
    "    time_to_maturity = full_market_data['Time to Maturity'].iloc[0]\n",
    "    strikes = full_market_data['Strike'].values\n",
    "    bid_prices = full_market_data[\"Bid\"].values\n",
    "    ask_prices = full_market_data['Ask'].values\n",
    "    market_ivs = full_market_data['Implied Volatility'].values\n",
    "    market_prices = full_market_data['Call Price'].values\n",
    "\n",
    "    marketVolatilitySmile = VolatilitySmile(\n",
    "        strikes=strikes,\n",
    "        time_to_maturity=time_to_maturity,\n",
    "        atm=spot,\n",
    "        market_ivs=market_ivs,\n",
    "        r=r\n",
    "    )\n",
    "    market_data = marketVolatilitySmile.filters(full_market_data, select_mid_ivs=True)\n",
    "\n",
    "    ####################################\n",
    "    ### Calibration \n",
    "    ####################################\n",
    "    heston = Heston(spot=spot, r=r, **params)\n",
    "    initial_params = marketVolatilitySmile.calibration(\n",
    "        price_function=heston.call_price,\n",
    "        guess_correlation_sign='negative',\n",
    "        initial_guess=[params['kappa'], params['theta'], params['sigma'], params['rho']],\n",
    "        speed='local',\n",
    "    )\n",
    "\n",
    "    # Absolute calibration\n",
    "    calibrated_params = marketVolatilitySmile.calibration(\n",
    "        relative_errors=False,\n",
    "        price_function=heston.call_price,\n",
    "        guess_correlation_sign='negative',\n",
    "        initial_guess=[initial_params['kappa'], initial_params['theta'], initial_params['sigma'], initial_params['rho']],\n",
    "        speed='global',\n",
    "        power='mse'\n",
    "    )\n",
    "    calibrated_prices = heston.call_price(\n",
    "        strike=marketVolatilitySmile.strikes, time_to_maturity=time_to_maturity, **calibrated_params\n",
    "    )\n",
    "    print(marketVolatilitySmile.evaluate_calibration(calibrated_prices, 'price'))\n",
    "    calibrated_ivs = marketVolatilitySmile.compute_smile(prices=calibrated_prices)\n",
    "    print(marketVolatilitySmile.evaluate_calibration(calibrated_ivs, 'iv'))\n",
    "\n",
    "    # Relative calibration\n",
    "    calibrated_params_relative = marketVolatilitySmile.calibration(\n",
    "        relative_errors=True,\n",
    "        price_function=heston.call_price,\n",
    "        guess_correlation_sign='negative',\n",
    "        initial_guess=[initial_params['kappa'], initial_params['theta'], initial_params['sigma'], initial_params['rho']],\n",
    "        speed='global',\n",
    "        power='mse'\n",
    "    )\n",
    "    calibrated_prices_relative = heston.call_price(\n",
    "        strike=marketVolatilitySmile.strikes, time_to_maturity=time_to_maturity, **calibrated_params_relative\n",
    "    )\n",
    "    print(marketVolatilitySmile.evaluate_calibration(calibrated_prices_relative, 'price'))\n",
    "    calibrated_ivs_relative = marketVolatilitySmile.compute_smile(prices=calibrated_prices_relative)\n",
    "    print(marketVolatilitySmile.evaluate_calibration(calibrated_ivs_relative, 'iv'))\n",
    "\n",
    "    # Some plots\n",
    "    ask_ivs = market_data['Ask ivs'].values\n",
    "    bid_ivs = market_data['Bid ivs'].values\n",
    "    forward = marketVolatilitySmile.atm * np.exp(marketVolatilitySmile.r * marketVolatilitySmile.time_to_maturity)\n",
    "\n",
    "    if ax == axs.flatten()[-2]:\n",
    "        ax.axvline(1, linestyle=\"--\", color=\"gray\", label=\"ATM\")\n",
    "        ax.plot(marketVolatilitySmile.strikes / forward, calibrated_ivs, label=\"absolute calibration\", marker='+', color='blue', linestyle=\"dotted\", markersize=4)\n",
    "        ax.plot(marketVolatilitySmile.strikes / forward, calibrated_ivs_relative, label=\"relative calibration\", marker='+', color='green', linestyle=\"dotted\", markersize=4)\n",
    "        ax.scatter(marketVolatilitySmile.strikes / forward, marketVolatilitySmile.market_ivs, label=\"mid\", marker='o', color='red', s=20)\n",
    "        ax.scatter(marketVolatilitySmile.strikes / forward, bid_ivs, label=\"bid\", marker=6, color='black', s=20)\n",
    "        ax.scatter(marketVolatilitySmile.strikes / forward, ask_ivs, label=\"ask\", marker=7, color='gray', s=20)\n",
    "        ax.legend(loc='upper right', prop=font_legend, ncol=2, alignment='left')\n",
    "    else:\n",
    "        ax.axvline(1, linestyle=\"--\", color=\"gray\")\n",
    "        ax.plot(marketVolatilitySmile.strikes / forward, calibrated_ivs, marker='+', color='blue', linestyle=\"dotted\", markersize=4)\n",
    "        ax.plot(marketVolatilitySmile.strikes / forward, calibrated_ivs_relative, marker='+', color='green', linestyle=\"dotted\", markersize=4)\n",
    "        ax.scatter(marketVolatilitySmile.strikes / forward, marketVolatilitySmile.market_ivs, marker='o', color='red', s=20)\n",
    "        ax.scatter(marketVolatilitySmile.strikes / forward, bid_ivs, marker=6, color='black', s=20)\n",
    "        ax.scatter(marketVolatilitySmile.strikes / forward, ask_ivs, marker=7, color='gray', s=20)\n",
    "\n",
    "    ax.set_xlabel(\"Moneyness [%]\", fontdict=fontdict)\n",
    "    ax.set_ylabel(\"Implied Volatility [%]\", fontdict=fontdict)\n",
    "\n",
    "    date = datetime.strptime(maturity, '%Y-%m-%d').date().strftime(\"%d-%B-%y\")\n",
    "    title = f\"{date}: {marketVolatilitySmile.time_to_maturity * 252 / 5:.1f} semaines\"\n",
    "    ax.set_title(title, fontdict=fontdict)\n",
    "    ax.grid(visible=True, which=\"major\", linestyle=\"--\", dashes=(5, 10), color=\"gray\", linewidth=0.5, alpha=0.8)\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
